WTPA2 TODO LIST for code:
================================
TMB
Tue Jul  6 19:47:50 EDT 2010


To Function:
==============
Switch reading code	-- done Wed Jul  7 17:45:48 EDT 2010  -- Really done: Wed Sep  1 22:15:30 EDT 2010
RAM addressing code -- done Mon Sep  6 17:17:44 EDT 2010
Flash addressing code	-- Wed Sep 15 16:14:51 EDT 2010 Initial flash read write done and tested
						-- Thu Sep 16 23:38:44 EDT 2010 Done
Encoder reading code -- @@@ Note, this doesn't mean just porting the pot code, since there are probably more intuitive ways for the encoder to work.
						NOTE: MIDI should update the encoder value.
						Thu Sep  2 17:45:31 EDT 2010 -- Done, as far as porting goes
Remove old pot code -- done Thu Sep  2 17:46:04 EDT 2010
Fix associated "Bad Reads" code that throws out reads after switching ADC channels -- done Thu Sep  2 17:46:04 EDT 2010
Put any unused pins to known state (could use extra pins to time ISRs and stuff) -- done Wed Jul  7 17:45:48 EDT 2010
Where is LATCH bus initialized (in MAIN) -- done Wed Jul  7 17:45:48 EDT 2010
Make sure any routines end with the AVR in charge of the bus -- done Wed Jul  7 17:45:48 EDT 2010
Make sure that the switch latch / OE pin doesn't get stepped on by writing the three RAM bits that aren't on a latch -- done Wed Jul  7 17:55:46 EDT 2010
Make sure bus turn around times are correct for new RAM chip -- Done Fri Sep 17 14:38:18 EDT 2010

To Fly (there are lots of threads about this on the forum):
=============================================================
Reintroduce test mode -- Done: Wed Sep  1 22:33:44 EDT 2010
Make out of RAM LED into something useful (maybe realtime indicator?)
@@@ do we need the &0xFF in the addressing in the ISRs?  I think not. --Done Fri Sep 17 14:38:05 EDT 2010

@@@ Fix the ISR start/stop functions so that references to "theClock" aren't dumb -- Done Sat Sep 18 18:31:30 EDT 2010

Retrieve anything else cool we traded for space in the last FW update, see:
-- Divided AudioHandler routines into bank-specific routines for ISR speed BUT
	--> this means we are way over memory.  So, got rid of intro sequence, debug mode, all sawtooth stuff, removed some timer functions, changed MIDI handling (don't recognize bytes we don't use anyway), changed LED blink functions (all blink times the same)
	--> Also kilt the random number init code.  Changed pinning in multiply-output mode.
	Thu Sep  2 17:47:12 EDT 2010 -- got back debug, sawtooth, intro seq

*** New buffer-based non-ISR RAM access (for ISR speed)

-- Make better match with new encoder based controls, like include MIDI update or maybe change sensitivity, or whatevs.
-- New Summing (subtractive, maybe ABS?)
-- "Copy" samples from bank to bank
-- Parameter control adjusts parameter as long as keys are held
-- Level triggered sampling -- threshold adjustable, level indicator?
-- "Finish playing MIDI note regardless of NOTE_OFF".  MIDI Play mode adjustment -- IE this would play an entire sample even if a user tapped a pad on a drum trigger.
-- Allow granulated playback to go backwards and also trigger once.
-- Fix granularizing to allow use on trimmed samples
-- Add the ability to MIDI trigger analog clock.
-- Allow individual grains to be played back via MIDI
-- Allow replacement in overdubbing
-- Allow for grains to be random sizes
-- Save edited sample over OG sample, or bounce to the other bank

Reverb and delay functions
More granularity (we have more RAM now)
MIDI firmware updating
ADSR which applies to volume or bit depth or whatever else.  A "parameter" adsr I guess.

Re-saving samples with effects or edits applied.
Manipulation of individual bits
From Glitched:

-- Accept MIDI clock IN (and/or voltage trigger IN and/or "tap tempo" IN) to allow for BPM-synced effects
-->The granulizer effect would benefit most from this (tempo-synced re-arranging of sample slices). The effect would have two parameters: "amount" and "clock division".
-->"Map slices to keyboard" could be be based on the "clock division".
-->"Random grain length" could also refer to the MIDI clock source to make random, yet quantized lengths.

-- Realtime manipulation of the 8 bits. (This has been discussed before.)
-->Separate midi CCs could control each bit's state.

Multiplication of banks could allow parameter control (of volume or whatever, as above) which might be cooler than the current multiply (which sux).
Granularizing as non-random, but rather a sequenced thing.  IE, MIDI note ons from 0-127 play that grain -- this could be a MIDI clock thing too.

GOOD IDEA -- have a realtime mode that uses the sample as some kind of controller for whatever is being done in realtime.  Sample data modulates realtime data.  Or VV.
			-- VV: realtime input gates or triggers samples.
			
--> Allow RC clock in MIDI mode, also allow internal clock in caveman mode.  Allows separate pitch per channel.
--> load samples from flash consecutively until we fill up RAM?

ISR speed ideas:
------------------
Sun Sep 12 13:20:42 EDT 2010
Inserted some clocking code (toggle a pin on ISR entrance and exit)
See what Olivier has to say, he's right about most stuff.
On jitter:
The first JitterTemp calculation can be precalculated (doesn't change much) and left in RAM and saves us a LONG MULTIPLY every time!
Therefore, jitterTemp/JITTER_VALUE_MAX can be precalculated too.

Note that get RNG code gets called from the main loop and thus might get called by the jitter function with the same number if the ISR happens more than once a loop.
We could inline it...
Also, does it need to be a long int?  Probably not.
RNG gets used in granular biz also.

Thu Sep 16 23:18:31 EDT 2010
Overdub while granularity is on?

Fri Sep 17 16:21:38 EDT 2010
On ISRs -- the fastest we can go on playback with the old best WTPA1 style ISR (only a few little tweaks from last time, still using interrupt handler, two audio handlers) is 11.4uS on playback with the address update code entirely removed.
So to get faster than that means fixing the "interrupt handler" stuff.
Operating normally (bank0 only, no effects) it averages 16.3uS
Interestingly, in normal granular playback it's 14uS and change because of the way the loop works.
I'm thinking of trying to eliminate the branch and instead have one var called "nextJump" then comparing the current addy to next jump, and if they aren't equal, just incrementing the address.
If the reverse flag is set, we then decrement the address by 2.  Or something like that.
nextJump is calculated from the main loop for each sample bank.

Can you clean up mainline speed at all?  Do you need to?
Interestingly, the main loop (normal caveman mode, no MIDI) takes about 43-44uS to complete.  This is about 23kHz, which is our fastest sampling rate.
Be nice if it was half that, but.
Interestingly also:
MIDI bytes come in at 3kHz, so MIDI _messages_ come in at like 1kHz, which means we'd have to screw the pooch real bad to mess that up.



OK, the following code:

		if(bankStates[BANK_0].currentAddress==daNextJump)
		{
			bankStates[BANK_0].currentAddress=daNextJumpPrime;
		}
		else if(!bankStates[BANK_0].sampleDirection)
		{
			bankStates[BANK_0].currentAddress--;
		}
		else
		{
			bankStates[BANK_0].currentAddress++;
		}

clocks in at 14.2uS.
The variation:

		if(bankStates[BANK_0].currentAddress==daNextJump)
		{
			bankStates[BANK_0].currentAddress=daNextJumpPrime;
		}
		else
		{
			bankStates[BANK_0].currentAddress++;
		}
		
		if(bankStates[BANK_0].sampleDirection==false)
		{
			bankStates[BANK_0].currentAddress-=2;
		}

Is more like 13.75uS and is 14 bytes longer.
One to grow on....


Fri Sep 17 18:17:14 EDT 2010
You know, the fastest way to do this would be to have callbacks which are just assigned directly to the interrupt vectors and tailored to the exact function, like:

ISR(TIMER1_CAPT_vect)
{
	ExtIntCallback0();	// Do all the audio work.
	ExtIntCallback1();
}

ISR(TIMER1_COMPA_vect)
{
	ClkIntCallback0();
}

ISR(TIMER1_COMPB_vect)
{
	ClkIntCallback1();
}

Where the callbacks were set to functions that were like:

Bank0_Playback_Granular_Reverse_Sum();

Or maybe just:
Bank0_Playback_Granular_Reverse();


and the ISR had a callback after called:
UpdateOutputCallback()
Which handled the summing.

The combos for bank 0 would be like:

Bank0_Realtime()
Bank0_Record()
Bank0_Playback_Sequential_Forward()
Bank0_Playback_Sequential_Reverse()
Bank0_Playback_Granular_Forward()
Bank0_Playback_Granular_Reverse()
Bank0_Overdub_Sequential_Forward()
Bank0_Overdub_Sequential_Reverse()
Bank0_Overdub_Granular_Forward()
Bank0_Overdub_Granular_Reverse()

Fri Sep 17 18:51:48 EDT 2010
Maybe this isn't as good as the jump, actually.

@@@ NOTE:  The way you're doing half speed won't work if there are IRQs going off at different rates.  You'll get some weird frequency division but it won't be half.  You'd need three
flip flops the way it is now.
NOTE:  Try seeing if updating the dac every cycle (instead of every time the dac byte changes) puts any more noise in the system.  I bet it doesn't and it would be faster.
Pretty sure there's a way to get rid of "interrupt handler" entirely.
In addition to getting rid of the call I think this can get rid of the switch(isrType) stuff as well as the if(CLK_NTERNAL....) stuff also.
Can process the type-specific isr stuff in its own vector and update a global with the output byte.  Something will have to zero them when not in use but it might be mainline or some other clever biz.
Finally, would need to update the output everytime an isr got called (or at least every time a non-record got called).
This might be the only tricky part.
Perhaps a call to a function which points at the type of recombination specified.


Sun Sep 19 11:30:55 EDT 2010
dacByte can be a local variable in the output routines.
Make sure the compiler inlines the dac output stuff.

Sun Sep 19 11:36:14 EDT 2010
Latch enables on the ADC PORT are:
DAC LE
RAM addressing LEs
OE
WE
(in other words, the important ones)
So, try to do RAM updates when the ADC is idle.  If you can....
OK, the sample and hold happens in the ADC 1.5 adc clock cycles (at an adc clock of 312.5 kHz (wtpa's current clock rate) this is 4.8uS after we set the flag which is
probably RIGHT in the middle of the memory accesss!!! 

Sun Sep 19 13:13:59 EDT 2010
HOLY SHIT.  Moving the start of the ADC read to the end of the ISR (in the old version of the code) TOTALLY ELIMINATED THE NOISE PROBLEM.
RTFM FTW!

Sun Sep 19 13:14:53 EDT 2010
Removed unnecessary tri-stating ram settings, write disables

Sun Sep 19 13:32:26 EDT 2010
Since the DAC code is common, could we just update it from the main loop?  Seems hinkey.

Sun Sep 19 14:22:00 EDT 2010
Actually, best way to do it is probably READ the value at the start of whatever and then wait until the end to begin a new conversion.
Better still, read it when needed (wait as long as you can) so you waste less time.  Fastest conversions happen when you don't wait to start a new one.
Pretty sure it's OK to write ADSC to 1 if it's already 1 (won't restart a conversion in progress)

Sun Sep 19 14:46:28 EDT 2010
---> might want to try handling accounting for both ext clock interrupts (checking a flag and clearing it to keep from leaving this code then an extra branch to an ISR when the clocks are synced) -- or not.
---> is there a way to keep from vectoring to the PCINT vect on a falling edge?  just cap, resistor, diode :-)

Sun Sep 19 14:48:31 EDT 2010
On compilation of new code (combinations are now func pointers, no switch statement, vectors no longer call HandleInterrupts(), outputs not voided in isrs, removed checks to see if the ISRs
being vectored to are the ones we need to use, removed check to see which ext interrupt bank is being updated when ext interrupt triggers, changed the way ADC data gets passed.

Bytes written to flash in old code: 21344
Bytes in new version				21266
New time in playback:				12.29uS (down from 16.3)
"" "" granular play:				10.4uS!

Further speed gains might be gained from:
1.)  Breaking UpdateAudioChannelx into callbacks
2.)  Changing the way addresses get resolved (see above -- no bigass branch based on function, computed jumps instead)

NOTE:  Recording seems to get fucked much above 18 kHz with the new routines.  Check that shit out.  NOTE:  ISR execution drops to 12.0 uS in playback when it does...?
Changed adc polling, now seems to get fucked at certain frequencies but not others.

OK -- not polling the ADC to see if it's done and re-setting the GO flag seems to be the problem
Moreover, I can confirm that there is a sampling frequency above which audio quality seems to decline (and it's about 21kHz).  This may be ADC related (I bet it is).
OK -- hauling the ADC's sample rate up to 48kHz seems to have solved this.  As far as I can tell there is no loss in audio quality.


Tue Jun  7 19:34:21 EDT 2011
You sure have been shitty about keeping notes here.  Some also seem to be spread across this file and also the project "hours_materials" file...

WTPA2 PROTO B
=============================
Get ready for WTPA2 release.
Notes on new board:
Encoder seems to work backwards.  Check datasheets and whatnot.


Fri Jun 17 19:01:39 EDT 2011
TODO:
		--	Make card-handling state machine
		--	On insert, wait warmup time before trying to init
		--	If INIT successful, check for WTPA2 filesystem
		--	If no filesystem, go to blinky state which requires user to press some buttons to format the card
		--	Write filesystem to card
		--	While you're at it, specify the filesystem....
		
		--	Fix retriggering on bank1	-- DONE
		--	Encoder backwards			-- DONE
		--	Play individual grains		-- NO
		--	New Button Scheme
		--	Parameter control adjusts parameter as long as keys are held
		--	Duophony (a second midi trigger on a bank will playback THAT BANK's sample using the other bank's ISR

		-- "Finish playing MIDI note regardless of NOTE_OFF".  MIDI Play mode adjustment -- IE this would play an entire sample even if a user tapped a pad on a drum trigger.
		-- @@@ Allow granulated playback to go backwards and also trigger once.
		-- @@@ Fix granularizing to allow use on trimmed samples
		-- @@@ Add the ability to MIDI trigger analog clock.

		-- Accept MIDI clock IN (and/or voltage trigger IN and/or "tap tempo" IN) to allow for BPM-synced effects
			-->The granulizer effect would benefit most from this (tempo-synced re-arranging of sample slices). The effect would have two parameters: "amount" and "clock division".
			-->"Map slices to keyboard" could be be based on the "clock division".

		-- Realtime manipulation of the 8 bits. (This has been discussed before.) Separate midi CCs could control each bit's state.
		-- have a realtime mode that uses the sample as some kind of controller for whatever is being done in realtime.  Sample data modulates realtime data.  Or VV.  VV: realtime input gates or triggers samples.
		-- Can realtime work on a per-channel basis, cause if it can, then you can already multiply realtime by a sample
		
Wed Jun 29 10:04:54 EDT 2011
		-- Legato option in MIDI playback
		-- Granular to most people means: take a single slice, then pitch it up or down with keyboard (rather than map slices across keyboard, which is also cool)

Fri Jul  8 18:39:53 EDT 2011
		-- Check out screw and chop, you might have broken it.
		-- Adjust sample scale (volume) of different channels
		
		
uSD ideas:

	When writing uSD
		Init Fifos and vars
		Determine bytes in sample
		Start ISR at high-ish MIDI rate
		In ISR, write bytes to FIFO.  Dec bytes to record.
			If FIFO gets full, skip ISR until it is un-full
			If all bytes have been transferred either stop ISR (might be a bad idea since marking it idle will flag remainder of program that it can do something else) or skip ISR until sample is written to uSD entirely
		In Mainline:
			Wait until either all bytes are in the fifo OR an entire 512 byte block is in the fifo
			Begin writing the block.
				if First Block, write the sample length (4 bytes)
				write from FIFO until block is full OR no samples left to write
					ran out of sample and block not complete?
						pad block
				end write
			Wait until block finished writing
			Any samples left?
				Loop again
			Write TOC if necessary
			TOC done?
				Stop ISR (if needed, see above)
				mark uSD idle
				mark channel idle

Necessary to not mark channel idle until writes are done?  As long as ISR part is done, this is OK I think.
Make CASE AUDIO_WRITE_SD which falls through to "AUDIO_PLAYBACK" so code can differentiate?  Might help with lights and stuff.

	When reading uSD
		Init fifos, vars
		Loading sample to SRAM, or playing back direct from SD?
			If loading:
				Start ISR at high-ish MIDI rate
				ISR flag is AUDIO_LOAD_FROM_SD, which falls through to record
			Playing back
				Start ISR with normal playback style speed settings (allow ext / int interrupts and different MIDI clock rates)
				ISR flag will be specific to uSD playback and will only loop once (it will not access RAM, not check bit reduction, etc)
		In ISR:
			If any bytes in FIFO, enact ISR, else skip
			If all sample bytes processed, end ISR and mark it done
		In Mainline:
			Begin SD read immediately
			Get number of bytes to read (bytes in sample)
			Continue reading block
			Is sample entirely loaded from SD?
				Finish block read, toss results
				Mark SD idle
				Wait for ISR to be done??
			Else finish block read (and check done-ness)
			
			Check room in fifo
				Either a whole block OR enough room for remainder of sample (if less than a block)?
					Begin new block read as above
				else
					Wait until we have room in FIFO
			
(If ISR is done AND we are done with all block reads, this is all done.  Do we need to wait for both or can we mark them as idle separately?)			
To support direct playback, will need to support ABORTING loads from SD by finishing the block read (somehow)


Thu Jul 28 11:09:22 EDT 2011
Set default playback note for uSD direct playback (per 127 note bank?)

Thu Jul 28 17:08:35 EDT 2011
Samples successfully loaded and stored to flash, loop length seems correct by ear.
HOWEVER, significant distortion is present on loaded samples.  With the input at mid-scale (silence) we see bits flop (LSbs so far).
With a sample, we see a lot of large leaps and significant distortion.

After sampling, watching serial SD transfers shows up an occasional flop on the write from SRAM to the SD.
The same flop happens on the read transfers from the SD, so that suggests that writing the SD and reading it are OK.
On writing the SD a second time, we see more errors.

We might be getting these errors when the SRAM is being written!

Doesn't seem it.
Tried slowing down SRAM writes, no dice.
Tried slowing uSD clock, no dice.

We also know that the audio is degenerated every cycle in and out of uSD.
We also know that there is audible hash in the line when the uSD is accessed.

Cut 5v trace to uSD regulator and patched in external supply.  Fixed noise (mostly) but did not fix errors.

Fri Jul 29 09:14:45 EDT 2011
Wait a minute genius.  Your bytes are probably getting shuffled back and forth between signed and unsigned.  Check that shit.
Was wrong.  Fixed it, but also didn't matter.
TransferSdByte?

Writing 0xFF to SD gives the correct bytes to the SD as well as reading back.
However, the sample played sounds fucked up.
DAC appears to be toggling between binary 127 and 128 regularly.  Mostly time is spent at 127.  This is signed 127 and -128!  This is a problem with the MSb.  This would result from reading in a hex 0, which we saw.
Problem is not regenerative of course.
MUST BE A PROBLEM FROM SD TO SRAM

made adcByte volatile, didn't matter
Tested making adcByte always 255...
No noise -- output stays at 127 (as expected)

So the problem must be in the bytes as they go into the FIFO.  Looks like you're inserting some zeroes.

Writing 0 to the SD results in quiet playback.  There is still a tick from 128 (normal) to 127 for one cycle, presumably at the beginning of the sample, which was not audible in the OG sample.
However, the remainder of the sample is quiet.

Seems like zeros indeed.... 

Your fifo read and write pointers were going off the end of the array, dumbass.

FIXED.  0xFF silence now works....
So does sample storage.  Take out the dumb shit now.  Debug out, clocks back up to speed.  Success!

Fri Jul 29 14:25:36 EDT 2011
Still tick when sampling silence, figure out why.  Seems intermittent
Get sd read write speed up, must read faster than max sample playback speed to play direct from SD.
Get slot addressing done, playback, etc etc.  Reconnect regulator.  Try 10 ohms in line with like 100 uF input cap to regulator.  At 100mA draw that will drop 5v to 4v, which is still plenty.
Make "out of RAM" light into "uSD Active" light.  

At 5Mhz SPI, and 9.6kHz ISR, we load the "Tupac Sample" in 10.02 seconds.  Ratcheting ISRs up to 25hKz...

Loads fine in 3.83 seconds with nothing else going on.  Consistent with ISR math, and may be room for faster still speed.  Average beginning of a block load to the beginning of the next block load is about 20mS
This is fast enough for direct playback, barely, since the "Tupac Sample" is 4.3 seconds long (the "Tupac Loop" is exactly 98534 bytes long, looking at the logic analyzer output).
So we load at a whopping 25.1kB a second :-)
Right, duh.  That means it's ISR limited.  Of course.
Also, FWIW, reading 64 bytes from a block happens in about 0.98mS, then the gap until the next read (presumably where the main loop happens) is about 0.118mS.
MIDI bytes can come in at 0.32mS or so, so this may not be good enough.

Loading "Tupac Sample" (same stats as above) during a 23kHz playback on the second bank does not cause any audible change in the playing sample -- good (wouldn't really expect it to, since it isn't ISR based)
However, the pretty serial exchange is a lot harder to follow :-)  The block-to-block is anwhere from 18mS to 26mS or so.
More importantly, the load time is now 4.688 seconds, which is no longer fast enough for direct playback (slowed down 22%)

Ratcheting to 32.768kHz
Loads in 2.96 seconds, block to block time probably averages somewhere in the 15.3 mS range.

Loading during playback is really bad though, 0.53 seconds block to block.  Whole sample isn't loaded in 10+ seconds.  (it does load fine eventually though) and it does not make an audible change in the sample playing.
ISRs must be colliding in some weird way, ISRs triggering and doing nothing but slowing down transfer, etc etc.

May need to make program smart enough to change load speed based on what any given banks are doing.
When loading, we could also pause ISRs on the loading channel if the fifo has been emptied (IE, if the ISR has nothing to do)

Mon Aug  1 10:39:01 EDT 2011
@@@ TEST RX0 with square wave in as per Olivier's warning

Tue Aug  2 13:34:38 EDT 2011
Re-structure ISR so "playback" is farther up in the switch statement.  This may execute faster, but I will need to play with the lss file to see.
I also bet it would be faster to make UpdateAudioChannel0 a callback, and duplicate any common code (the beginning outputByte=0, ending return(outputByte)) into each function call.
This I'm pretty sure of.
Callback functions would be like AudioCallbackPlaybackCh0() and et cet

Wed Aug  3 11:31:59 EDT 2011
Wrote direct playback routine.  Right now, from the function call to the first byte being in the FIFO (delay until playback starts) is about 0.46mS.  We hardcoded to play back samples at 22050
Average block to block is about 23mSecs, with about 16 of those being idle.  Pretty sweet.

No slowdown when other bank is playing at 25kHz.  Block to block period still 23mS, idle time now 9mSecs.
@@@ Ought to make samples play from EXT clock as well.
@@@ Need to be able to abort SD reads midway through when playing back

Left todo:
UI, volume, midi implements, granularity, NES, different clock assignments (MIDI trigger ext clock OR sd stream from ext clock), duphony

Fri Aug  5 14:21:27 EDT 2011
Handle aborting sd playback if user hits any other audio function.
Perhaps a function which checks the ISR function, and if it is not SD related (playback, read, MAYBE write?) and the SD state machine is NOT in an SD playback related state, abort the read.  Would need to think about all the cases.

Make rules for sample loads and saves -- can audio functions interrupt?
To wit:
Play and Overdub cannot interrupt loading RAM, since sample in RAM will be gibberish.
Record could, I guess...
Nothing can interrupt loading SD, or the TOC could be fuct.

So, most sensical to make NOTHING interrupt SD access.
Easy to lock out switches by checking whether the bank is using the SD from the main sampler loop.
In MIDI, check the channel number of the incoming message and if that channel is doing SD access, ignore the message.

Tue Aug 23 12:55:49 EDT 2011
Change aborts to more generic state where the SD state machine only re-triggers on abort when the abort has been triggered by another SD playback.
Allow effects to be changed while reading/writing SD.  Just can't change ISR modes.

Also, must clear sdUsingBank(x) flags.
Might want to make these a part of the bank structs to make it easier to check *** DONE

*** FIXED (playback stuff)
Still need to keep reads/writes from interrupting  *** DONE

Wed Aug 24 16:24:11 EDT 2011
Now make proper loader/saver, and make this work on BANK_1 also.

Wed Aug 24 17:27:27 EDT 2011
***LOADING AND STORING ON BANK 1 also.

New UI next.

Sat Sep 24 15:26:23 EDT 2011
Changing the way the SD/RAM interactions happen in the ISRs.  The old way was real dirty.  The new one uses a dedicated ISR and locks RAM bank0 and bank1 when the SD is reading/writing them.
Needs new ISR written, SD play/read/write/cleanup fixed, old ISRs need that functionality removed.
@@@ fix the way you're handling preventing SD/RAM collision (ignoring button presses, MIDI data) and check the lock bytes instead.

NOTE -- this is going to get new heights of crustiness in playback since we are now summing three things into the DAC's output.  When they're all pegged they'll saturate something fierce.
NOTE -- also gotta figure out how to work this byte into the recombination at the DAC when it's anything besides a sum.

Sat Sep 24 16:41:54 EDT 2011
*** Wrote ISR
*** Fixed other ISRs
@@@ Bit reduction is in the audio handler, but halftime and other effects are elsewhere.  Too bad this can't all be in one place....
@@@ Multiply shizz is fucked

Sat Sep 24 20:17:03 EDT 2011
Wrote ISR functions and mainline calls for handling TIMER2 playback and writing.  Still need to change write/read/play/cleanup functions.
Still need to change DAC functions -- summing, multiply etc etc
@@@ keep in track when we will need to void contributions to the DAC too (if the ISR stops) -- Can you handle this in StopUnusedInterrupts()?  Think on this.

Tue Sep 27 21:17:19 EDT 2011
Does this mean we can read and write the SD card while also using record or playback?  Sort of....
Per bank:
If we're writing the RAM, we can't be playing back.  Likewise, if we are reading the RAM, we can't be recording to it.
We cannot write the ram and also record to the RAM (duh).  So, we cannot record (or overdub) while doing anything with the SD.
We can, however, be writing the SD (reading the RAM) and playing back, no conflicts.

So, we need to make record and overdub lock the ram. Getting a sample from the SD and writing RAM should lock the RAM.  It should also stop other audio functions.

We could make everything lock the RAM, except that the normal RAM accesses (play, rec) are OK to step on each other.

Writing to the RAM (from SD) we stop audio functions first and then lock RAM (or just don't let the write happen)
Reading the RAM (writing SD) we make sure the audio is playing back or idle.  Do not lock RAM?  SD won't step on other SD access
No normal functions lock the bank.  But they do not start if the bank is locked.  DO this with the first case (SD writing RAM too)

So what happens if we're writing the SD and playing back, and playback changes to record....

OR.  Could just lock the bank when any SD/RAM biz happens.  Either stop audio when those are called OR don't let them be called unless audio is idle.


**note -- we could actually be recording to ram AND reading from ram to the SD (no collisions) except when the SD caught up with the record pointer, it would think it was done and stop writing the sd
we could probably fix this but it would be annoying and not particularly useful.

Sun Nov 13 17:34:27 EST 2011
-------------------------------
So, SdIsr start/stop reading RAM lock the ram.  Just need to make play/odub/rec lock/unlock the ram too
We need a way to intentionally stop SD playback too, maybe.  Do we?
Only adding in the stream in "add" output function

OK for Play / Rec to step on each other, but not on SD functions... Figure it out


Thu Nov 24 20:54:42 CST 2011
Happy Thanksgiving -- new ISRs and locked bank ideas are all done.
See TODO list but big ones are any granularity additions, new UI, olivier's bootloader, and Andrew's DPCM stuff

Thu Jan 19 08:08:30 EST 2012
Idea from forum -- time x 2 (as opposed to time /2, skrew and chop)
GOOD IDEA--
Can make this a variable CC or parameter.  This tells how many samples to hold (IE, holding one sample twice == skrew and chop) or how many to skip in playback.  IE, advancing 2 samples instead of 1 will double speed with
some weird artifacts.  COOL.
This also helps code flow -- can get rid of "flipFlop" variable.  Can also get rid of "halfSpeed" variable.  Can make a variable which says how many samples to skip or advance...

Mon Oct 28 12:18:50 EDT 2013
Why can't we introduce jitter from manual inputs again?

Tue Oct 29 15:43:22 EDT 2013
Allow speed control (MIDI only perhaps) of SD streaming playback
